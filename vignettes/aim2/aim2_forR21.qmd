---
title: "ABX R21 Preliminary Analysis"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    toc-depth: 3
abstract: "DIABIMMUNE Cohort (This vignette is part of Chloe's thesis Aim2.)"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      message = FALSE, 
                      # eval = FALSE,
                      collapse = TRUE)
```

# Setup
## Load packages
```{r}
suppressPackageStartupMessages({
    library(mia)
    library(dplyr)
    library(tidymodels)
    library(stringr)
    library(ggplot2)
    library(dotwhisker)
    library(biobroom)
    library(phyloseq)
    library(vegan)
    library(gridExtra)
    library(jtools)
    library(microViz)
    library(table1)
    library(flextable)
    library(microViz)
})
```

## Load data
Data were processed by *Nephele*
```{r}
phyloYassour <- import_biom("data/Yassour/taxa.biom")
metaYassour <- read.csv("data/Yassour/YassourM_2016_metadata.csv")
treeYassour <- read_tree("data/Yassour/phylo/rooted_tree.nwk")
```

## Load functions
- `vesuvius`:
- `suptab`:
```{r}
source("R/utils.R")
```


## Data cleaning (1)
```{r}
## One of the metadata rows is missing and should be removed
metaYass <- sample_data(metaYassour)
metaYass$SampleID <- metaYass$X.SampleID
metaYass <- metaYass[!is.na(metaYass$SampleID)]
sample_names(metaYass) <- metaYass$SampleID
sample_data(phyloYassour) <- metaYass
yass <- phyloYassour # phyloseq-class object
phy_tree(yass) <- treeYassour
```

### De-duplicate phyloseq samples
```{r}
yassdd <- ps_dedupe(yass, vars = c("subject_id", "assessment_day"))
yassdupes <- yass
yass <- yassdd # phyloseq-class object
```

### Add age category (`agecat`)
```{r warning=FALSE, message=FALSE}
sample_data(yass)$agecat[sample_data(yass)$infant_age<100] <- "0-99 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=100 & sample_data(yass)$infant_age < 200] <- "100-199 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=200 & sample_data(yass)$infant_age < 300] <- "200-299 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=300 & sample_data(yass)$infant_age < 400] <- "300-399 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=400 & sample_data(yass)$infant_age < 500] <- "400-499 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=500 & sample_data(yass)$infant_age < 600] <- "500-599 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=600 & sample_data(yass)$infant_age < 700] <- "600-699 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=700 & sample_data(yass)$infant_age < 800] <- "700-799 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=800 & sample_data(yass)$infant_age < 900] <- "800-899 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=900 & sample_data(yass)$infant_age < 1000] <- "900-999 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=1000 & sample_data(yass)$infant_age < 1100] <- "x1000-1099 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=1100 & sample_data(yass)$infant_age < 1200] <- "x1100-1199 days"
sample_data(yass)$agecat[sample_data(yass)$infant_age>=1200 & sample_data(yass)$infant_age < 1300] <- "x1200-1299 days"
```

### Add ABX exposure information (`abxexpose`)
`study_condition` column of `sample_data(yass)` contains `NA` if there is no ABX exposure/info.
```{r}
studyconds <- sample_data(yass) %>% 
    group_by(subject_id) %>% 
    summarize(subject_id = dplyr::first(subject_id), 
              abxexpose = n_distinct(study_condition) > 1)

yass <- ps_join(yass, studyconds)
```

### ABX encoding
Convert individual ABX names into their class
```{r}
source("R/abx_encoding.R")
```

### ABX exposure timepoints
```{r}
sampYass <- sample_data(yass) %>% data.frame()
sampYass <- sampYass %>% 
    separate(study_condition, c("sc1", "sc2", "sc3", "sc4", "sc5"), sep = ",") %>% 
    separate(duration, c("dur1","dur2", "dur3", "dur4", "dur5"), sep = ",") %>%  
    separate(antibiotic_day, c("abday1", "abday2", "abday3", "abday4", "abday5"), sep = ",")

sampYass <- sampYass %>% 
    rowwise() %>% 
    mutate(
  dayssinceabx1 = infant_age - sum(as.numeric(dur1), as.numeric(abday1), na.rm = TRUE),
  dayssinceabx2 = infant_age - sum(as.numeric(dur2), as.numeric(abday2), na.rm = TRUE),
  dayssinceabx3 = infant_age - sum(as.numeric(dur3), as.numeric(abday3), na.rm = TRUE),
  dayssinceabx4 = infant_age - sum(as.numeric(dur4), as.numeric(abday4), na.rm = TRUE),
  dayssinceabx5 = infant_age - sum(as.numeric(dur5), as.numeric(abday5), na.rm = TRUE))

sampYass$dayssinceabx1[is.na(sampYass$sc1)] <- NA
sampYass$dayssinceabx2[is.na(sampYass$sc2)] <- NA
sampYass$dayssinceabx3[is.na(sampYass$sc3)] <- NA
sampYass$dayssinceabx4[is.na(sampYass$sc4)] <- NA
sampYass$dayssinceabx5[is.na(sampYass$sc5)] <- NA
sampYass$dayssinceabx1[sampYass$dayssinceabx1<0] <- 0
sampYass$dayssinceabx2[sampYass$dayssinceabx2<0] <- 0
sampYass$dayssinceabx3[sampYass$dayssinceabx3<0] <- 0
sampYass$dayssinceabx4[sampYass$dayssinceabx4<0] <- 0
sampYass$dayssinceabx5[sampYass$dayssinceabx5<0] <- 0

hist(sampYass$dayssinceabx2)
```

### Fix duplicated ABX data entries

```{r fix_duplicated_data_entry}
sample_data(yass)$study_condition[sample_data(yass)$sample_id=="SRR8119101"] <- "Amoxicillin, Trimetoprime and sulfadiazine, Azithroymycin"
sample_data(yass)$antibiotics_day[sample_data(yass)$sample_id=="SRR8119101"] <- "517.429, 517.429, 517.429"
sample_data(yass)$duration[sample_data(yass)$sample_id=="SRR8119101"] <- "7, 7, 7"

sample_data(yass)$study_condition[sample_data(yass)$sample_id=="SRR8120834"] <- "Trimetoprime and sulfadiazine, Amoxicillin, Amoxicillin"
sample_data(yass)$antibiotics_day[sample_data(yass)$sample_id=="SRR8120834"] <-  "486.992, 608.74, 700.051"
sample_data(yass)$duration[sample_data(yass)$sample_id=="SRR8120834"] <- "6, 5, 5"

sample_data(yass)$study_condition[sample_data(yass)$sample_id=="SRR8119766"] <- "Cefalexin, Trimetoprime and sulfadiazine"
sample_data(yass)$antibiotics_day[sample_data(yass)$sample_id=="SRR8119766"] <-  "639.177, 639.177"
sample_data(yass)$duration[sample_data(yass)$sample_id=="SRR8119766"] <- "7, 7"
```

```{r}
sY <- sample_data(sampYass)
sample_names(sY) <- sampYass$SampleID
sample_data(yass) <- sY
```






# PCA
```{r}
library(MicrobiotaProcess)
yasspca <- get_pca(obj = yass, method = "rclr") # takes time
```

```{r echo=FALSE, eval=FALSE}
saveRDS(yasspca, "data/Yassour/yasspca.rds")
```


## PC1 vs. PC2
```{r pca_plots_infant_age, eval=FALSE}
pcaplot1 <- ggordpoint(obj = yasspca, 
                       biplot = TRUE,
                       factorNames = c("infant_age"), 
                       ellipse = TRUE) + 
    theme(legend.position = "none")

pcaplot2 <- ggordpoint(obj = yasspca, 
                       pc = c(1, 3), 
                       biplot = TRUE,
                       factorNames = c("infant_age"), 
                       ellipse = TRUE)
pcaplot1 | pcaplot2
```

```{r pca_plots_age_category, eval=FALSE}
pcaplot1 <- ggordpoint(obj = yasspca, 
                       biplot = TRUE,
                       factorNames = c("agecat"), 
                       ellipse = TRUE) + 
    theme(legend.position = "none")
pcaplot2 <- ggordpoint(obj = yasspca, 
                       pc = c(1, 3), 
                       biplot = TRUE,
                       factorNames = c("agecat"), 
                       ellipse = TRUE)
pcaplot1 | pcaplot2
```

```{r elbow_plot?}
yassrda <- ordinate(yass, method = "RDA") # redundancy analysis
plot_scree(yassrda) + 
    coord_cartesian(xlim = c(1, 25.9))

yasspcs <- scores(yassrda)$sites
```

## PCA on the control samples
Select controls that were exposed to ABX.
```{r select_ABX_exposed}
yasscontrol <- subset_samples(yass, abxexpose == TRUE)
```

```{r normalization}
yasspca <- get_pca(obj = yasscontrol, method = "rclr")
pcaplot1 <- ggordpoint(obj = yasspca, 
                       biplot = TRUE,
                       factorNames = c("agecat"), 
                       ellipse = TRUE)
pcaplot2 <- ggordpoint(obj = yasspca, 
                       pc = c(1, 3), 
                       biplot = TRUE,
                       factorNames = c("agecat"), 
                       ellipse = TRUE)
pcaplot1
pcaplot2
```

```{r}
yassrda <- ordinate(yasscontrol, method = "RDA")
plot_scree(yassrda) + coord_cartesian(xlim = c(1, 25.9))
```

```{r echo=FALSE, eval=FALSE}
## Using the overall PCA plot individuals

yasspca <- ordinate(yass, method = "RDA")
p <- plot_ordination(yass, yasspca, color = "abx")

indpca <- function(x){
  psub <- p
  psub$data <- psub$data[psub$data$subject_id==x,]
  psub + geom_point(aes(size=infant_age))
}

lapply(subjects, indpca)
```





# Alpha Diversity
Add alpha diversity and PCs to the *phyloseq* object

```{r}
alpha <- estimate_richness(yass) # summarize alpha diversity
alpha$sample_id <- rownames(alpha)
# head(alpha)
# head(sample_data(yass))

yass <- ps_join(yass, alpha)

yasspca <- ordinate(yass, method = "RDA")
yasspcs <- scores(yasspca)$sites |> data.frame()
yasspcs$sample_id <- rownames(yasspcs)

yass <- ps_join(yass, yasspcs) # We have the PCs but need to lag them
```

```{r}
sY <- data.frame(sample_data(yass))
sY <- sY %>% 
    dplyr::arrange(subject_id, infant_age) %>% 
    group_by(subject_id) %>% 
    mutate(prevShannon = lag(Shannon), 
           prevPC1 = lag(PC1), # `lag` function fine the 'previous' values
           prevPC2 = lag(PC2), 
           prevpen = lag(penicillins), 
           prevceph = lag(cephalosporins), 
           prevmac = lag(macrolides), 
           prevsulf = lag(sulfonamides), 
           prevother = lag(other))

# Use the baseline microbiome measure for first samples lag terms
sY$prevShannon[is.na(sY$prevShannon)] <- sY$Shannon[is.na(sY$prevShannon)]
sY$prevPC1[is.na(sY$prevPC1)] <- sY$PC1[is.na(sY$prevPC1)]
sY$prevPC2[is.na(sY$prevPC2)] <- sY$PC2[is.na(sY$prevPC2)]

# Use the baseline antibiotics measure for first samples lag terms (all should be 0)
sY$prevpen[is.na(sY$prevpen)] <- 0
sY$prevceph[is.na(sY$prevceph)] <- 0
sY$prevmac[is.na(sY$prevmac)] <- 0
sY$prevsulf[is.na(sY$prevsulf)] <- 0
sY$prevother[is.na(sY$prevother)] <- 0

sYreduc <- sY %>% 
    select(sample_id, prevShannon, prevPC1, prevPC2, 
           prevpen, prevceph, prevmac, prevsulf, prevother)
yass <- ps_join(yass, sYreduc)

sample_data(yass)$prevpen[is.na(sample_data(yass)$prevpen)] <- 0
sample_data(yass)$prevceph[is.na(sample_data(yass)$prevceph)] <- 0
sample_data(yass)$prevmac[is.na(sample_data(yass)$prevmac)] <- 0
sample_data(yass)$prevsulf[is.na(sample_data(yass)$prevsulf)] <- 0
sample_data(yass)$prevother[is.na(sample_data(yass)$prevother)] <- 0

# sample_data(yass) %>% View()
```

```{r echo=FALSE, eval=FALSE}
saveRDS(yass, "data/yass_read_for_modeling.rds")
```

# Modeling
## Load packages
```{r}
suppressPackageStartupMessages({
    library(limma)
    library(microbiome)
    library(phylosmith)
    library(splines)
    library(edgeR)
})
```

```{r echo=FALSE, eval=FALSE}
yass <- readRDS("data/yass_read_for_modeling.rds")
```

## Designs
Select one of the four possible model designs: Shannon diversity index, 
PC1, PC2, or all of them.

```{r designs}
dfyass <- data.frame(sample_data(yass))

# Testing a single interaction model
design <- model.matrix(
    ~ penicillins + macrolides + cephalosporins + sulfonamides + other +
        bs(infant_age) + prevShannon + penicillins*prevShannon +
        macrolides*prevShannon + cephalosporins*prevShannon +
        sulfonamides*prevShannon + prevpen + prevceph + prevmac +
        prevsulf + prevother,
    data.frame(sample_data(yass)))
max_weight <- sample_data(yass)$Shannon %>% max

# # PC1 model
# design <- model.matrix(
#     ~ penicillins + macrolides + cephalosporins + sulfonamides + other +
#         bs(infant_age) + prevPC1 + penicillins*prevPC1 + macrolides*prevPC1 +
#         cephalosporins*prevPC1 + sulfonamides*prevPC1 + prevpen +
#         prevceph + prevmac + prevsulf + prevother,
#     data.frame(sample_data(yass)))
# max_weight <- sample_data(yass)$PC1 %>% max

# # PC2 model
# design <- model.matrix(
#     ~ penicillins + macrolides + cephalosporins + sulfonamides + other +
#         bs(infant_age) + prevPC2 + penicillins*prevPC2 + macrolides*prevPC2 +
#         cephalosporins*prevPC2 + sulfonamides*prevPC2 + prevpen +
#         prevceph + prevmac + prevsulf + prevother,
#     data.frame(sample_data(yass)))
# max_weight <- sample_data(yass)$PC2 %>% max
# 
# # Comprehensive model: Shannon, PC1, and PC2 ==> Don't use, because it's not interpretable
# design <- model.matrix(
#     ~ penicillins + macrolides + cephalosporins + sulfonamides + other +
#         bs(infant_age) + prevShannon + penicillins*prevShannon +
#         macrolides*prevShannon + cephalosporins*prevShannon +
#         sulfonamides*prevShannon + penicillins*prevPC1 +
#         macrolides*prevPC1 + cephalosporins*prevPC1 +
#         sulfonamides*prevPC1 + penicillins*prevPC2 +
#         macrolides*prevPC2 + cephalosporins*prevPC2 +
#         sulfonamides * prevPC2,
#     data.frame(sample_data(yass)))
```

```{r echo=FALSE, eval=FALSE}
otu <- abundances(microbiome::transform(yass, "log10"))
meta <- meta(yass)
```

## Limma
```{r modeling}
## Filter and Transformation
yassfilt <- yass %>% taxa_filter(frequency = 0.05) # subset to ASVs found in at least 5% of samples 
d <- abundances(yassfilt) # Retrieves the taxon abundance table from phyloseq-class object
y <- voom(d, design, plot = TRUE) # voom transformation

## Linear model
cor <- duplicateCorrelation(y, design, block = dfyass$subject_id) 
fit <- lmFit(y, design, 
             block = dfyass$subject_id, 
             correlation = cor$consensus.correlation) # Linear model
fit <- eBayes(fit) # Bayes Statistics for DE

pvals <- data.frame(fit$p.value)
pvals <- cbind(pvals, oldname = rownames(pvals))
yasstax <- phyloseq::tax_table(yass) |> as.data.frame()
yasstax$oldname <- rownames(yasstax)

# Summarise
library(kableExtra)
topGenesTb <- topTable(fit, coef = 16, p.value = 0.05, number = 1000)
pen <- cbind(topGenesTb, oldname = rownames(topGenesTb))
```

```{r echo=FALSE, eval=FALSE}
# Limma effect sizes
efs.limma <-  fit$coefficients[, "penicillins"]
```

```{r echo=FALSE, eval=FALSE}
View(fit$coefficients)
```

```{r}
## Column names in the fit model
## Argument for `vesuvius` function (`coef`)
coefArgTb <- data.frame(ind = seq_len(ncol(fit$coefficients)),
                        term = colnames(fit$coefficients))
colnames(fit$coefficients)
```

```{r volcano_plots}
# vesuvius(x = 2) # Penicillins
# vesuvius(x = 3) # Macrolides
# vesuvius(x = 4) # Cephalosporins <<<<<<<<<<< ERROR from combined design: replacement has 1 row, data has 0 
# vesuvius(x = 5) # Sulfonamides

vesuvius(x = 16) # Penicillins x interaction
vesuvius(x = 17) # Macrolides x interaction
vesuvius(x = 18) # Cephalosporins x interaction
vesuvius(x = 19) # Sulfonamides x interaction
```

# Visualization
## Create Histogram + Density Plot
- Goal: look at the distributions of the effect sizes and how they would change with the addition of an interaction term

- Histogram: the logFC estimates for the main effects of each class of antibiotics
- Density: the lofGC when the interaction term logFC for the maximum value of the composition variable is added to the main effects logFC

- Interpretation: how the logFC of the specific class of antibiotic changes as the lagged microbiome composition variable increases. 
```{r fig.width=6.5, fig.height=6}
i <- 5 # the main effect: For example, `coef=3` is for 'microlides main effect'
j <- i + 14 # interaction term + main effect
coefArgTb$term[j]

# Histogram of the main effect
pen <- data.frame(topTable(fit, i, 1000)) 
pen$`BH-adjusted p`[pen$adj.P.Val >= 0.05] <- "p >= 0.05"
pen$`BH-adjusted p`[pen$adj.P.Val < 0.05] <- "p < 0.05"
pen$seq <- rownames(pen)

main <- ggplot() + 
    geom_histogram(
        binwidth = 0.1, 
        mapping = aes(x = logFC, fill = `BH-adjusted p`), 
        data = pen)

# Density Plot
int <- data.frame(topTable(fit, j, 1000))
int$`BH-adjusted p`[pen$adj.P.Val >= 0.05] <- "p >= 0.05"
int$`BH-adjusted p`[pen$adj.P.Val < 0.05] <- "p < 0.05"
int$seq <- rownames(int)

comb <- dplyr::inner_join(pen, int, by = "seq", suffix = c("main", "int"))
comb$logFC <- comb$logFCmain + comb$logFCint*max_weight # reflect weight of the interaction term
comb$`BH-adjusted p`[comb$adj.P.Valint >= 0.05] <- "p >= 0.05"
comb$`BH-adjusted p`[comb$adj.P.Valint < 0.05] <- "p < 0.05"

main + 
    geom_freqpoly(binwidth = 0.1, # frequency polygon plot
                  alpha = 0.4, 
                  mapping = aes(x = logFC, 
                                linetype = "Interaction-modified logFC"), 
                  data = comb) +
    ylab("Count") + 
    theme_clean() + 
    # ggtitle(coefArgTb$term[j]) +
    ggtitle("Sulfonamides and Shannon") +
    labs(linetype = "") + 
    theme(legend.background = element_rect(color = NA)) + 
    theme(legend.position = "bottom")
```

```{r eval=FALSE}
plot(fit$coefficients[, 2], fit$coefficients[, 13])
```

# Tables for thesis
## Supplemental tables
ASVs associated with terms in each design

```{r}
a <- c(2,3,4,5,16,17,18,19)
b <- c("Penicillins", "Macrolides", "Cepalosporins", "Sulfonamides",
       "Penicillins x lagged PC2", "Macrolides x lagged PC2",
       "Cephalosporins x lagged PC2", "Sulfonamides x lagged PC2")
suptables <- data.frame(index = a, name = b)

lstables <- lapply(suptables[,1], suptab)
lstables[[1]]

file <- "aim2_supp_tables_pc2_all.xlsx"

library(openxlsx)
wb <- createWorkbook("aim2_supp_tables_set2")
for(i in 1:nrow(suptables)){
  print(suptables[i,2])
  addWorksheet(wb,suptables[i,2])
  writeData(wb,suptables[i,2], lstables[[i]])
}

saveWorkbook(wb, file, overwrite = TRUE)
```

Correlation plot between different antibiotic families

```{r eval=FALSE}
library(corrplot)
corrplot(cor(fit$coefficients[,13:24]), method = "square")
```

```{r eval=FALSE}
write.fit(fit, file="limma results.tsv")
```

```{r eval=FALSE}
qqt(fit$t[, 10], df = fit$df.residual + fit$df.prior); abline(0,1)
```

```{r eval=FALSE}
volcanoplot(fit, coef=2, highlight=10)
```

```{r eval=FALSE}
yass
colnames(yasstax) <- c("kingdom", "phylum", "class", "order", "family", "genus", "species")
yassra <-  transform_sample_counts(yass, function(x) x / sum(x))
yasstse <- makeTreeSummarizedExperimentFromPhyloseq(yassra)
yasstse <- agglomerateByRank(yasstse, "phylum")
yasstidy <- tidy(yasstse, addPheno = TRUE)
yasstidy %>% group_by(SampleID) %>% summarize(ratotal = sum(value)) #Ensure that relative abundances make sense (all should be 1)
```

Create a data frame filtered for no multiple antibiotics exposure and only ones from the past 31 days
```{r eval=FALSE}
yassfilt <- yasstidy[(yasstidy$dayssinceabx1<31 | is.na(yasstidy$dayssinceabx1)),]
yassfirm <- yasstidy[yasstidy$gene=="Firmicutes",]
hist(yassfirm$value)
```

```{r eval=FALSE}
# Try modeling Shannon
# Try out limma and see if I can fit models in that
library(lme4)
library(splines)
mod1 <- lmer(value ~ penicillins + macrolides + cephalosporins + sulfonamides + other + penicillins*sulfonamides + bs(infant_age) + (1|subject_id), data=yassfirm)
summary(mod1)
library(lmerTest)
library(broom.mixed)
anova(mod1)
qqnorm(resid(mod1))

```

Create a function that automates filtering and modeling
```{r eval=FALSE}
taxon_glm <- function(taxon) {
  yasstaxon <- yassfilt[yassfilt$gene==taxon,]
  if (yasstaxon$value[1] < 1000) {
  modfit <- tryCatch(lmer(value ~ penicillins + macrolides + cephalosporins +
                            sulfonamides + other + bs(infant_age) + (1|subject_id),
                          data=yasstaxon), 
                   error=function(e) NULL)
  fit <- tryCatch((broom.mixed::tidy(modfit)), error=function(e) NULL)
    if (dim(broom.mixed::tidy(modfit))[2] > 0) {
      return(cbind(fit, taxon))
    }
  #tryCatch(plot_summs(modfit, model.names=taxon), error=function(e) NULL)
  #tryCatch(qqnorm(resid(modfit), ylab=taxon), error=function(e) NULL)
  #tryCatch(qqline(resid(modfit)), error=function(e) NULL)
  }
}
```

### Phyla Models
```{r eval=FALSE}
phyla <- unique(yassfilt$gene)
lapply(phyla, taxon_glm)

## calculate fdr (q<0.2)
## rank and look at estimates
```

### Class Models
```{r eval=FALSE}
yasstse <- makeTreeSummarizedExperimentFromPhyloseq(yassra)
yassclass <- agglomerateByRank(yasstse, "class")
yasstidyclass <- tidy(yassclass, addPheno = TRUE)
yasstidyclass %>% group_by(SampleID) %>% summarize(ratotal = sum(value))
yassfilt <- yasstidyclass[(yasstidyclass$dayssinceabx1<31 | is.na(yasstidyclass$dayssinceabx1)) & yasstidyclass$multiabx==0,]
classes <- unique(yassfilt$gene)
classmods <- lapply(classes, taxon_glm)
```

Create synthetic variables for each abx class which is cumulative number of exposures (that time point + all following time points is cumulative number of exposures like macrolides is 1 and then goes to 2)


## Table1. Descriptive Statistics
### Antibiotics exposures
```{r}
dfyass <- data.frame(sample_data(yass))
dfyass$abxcondition[dfyass$abxexpose == TRUE] <- "Antibiotics Exposed"
dfyass$abxcondition[dfyass$abxexpose == FALSE] <- "Unexposed"

shannon <- phyloseq::estimate_richness(yass, measure = "shannon")
shannon$SampleID <- rownames(shannon)
dfyass <- dplyr::inner_join(dfyass, shannon)


participants <- dfyass %>% group_by(subject_id) %>%
    summarize(
        `Birth Year` = first(Year.of.birth), 
        Country = first(Country), 
        Gender = first(Gender), 
        `Delivery Mode` = first(Delivery.type),
        `Gestational Age` = first(Gestational.age),
        Gender = first(gender),
            `Antibiotics Exposure` = first(abxcondition),
            `Shannon Alpha Diversity` = first(Shannon),
            `Assessments Completed` = n(),
            `# of Antibiotic Courses` = sum(!is.na(sc1)) + sum(!is.na(sc2)) + 
                sum(!is.na(sc3)) + sum(!is.na(sc4)) + sum(!is.na(sc5)))

participants$`Birth Year` <- factor(participants$`Birth Year`)
participants$`Gender` <- factor(participants$`Gender`)
participants$`Country` <- factor(participants$`Country`)
participants$`Delivery Mode` <- factor(participants$`Delivery Mode`)
participants$`Antibiotics Exposure` <- factor(participants$`Antibiotics Exposure`)

table1(~ `Assessments Completed` + `# of Antibiotic Courses` + 
           `Birth Year` + Gender + `Delivery Mode` + 
           `Shannon Alpha Diversity`| `Antibiotics Exposure`, 
       data = participants) %>% t1flex()
```

### Reason for ABX treatments
```{r}
dfyass$disease %>% table()
dfyass$disease %>% table() %>% prop.table()
```

### Infant age at enrollment
```{r}
dfyass %>% 
    group_by(subject_id) %>% 
    summarize(enrollage = min(infant_age)) %>%
    summarize(meanenroll = mean(enrollage), sdenroll = sd(enrollage))

dfyass %>% 
    group_by(subject_id) %>% 
    summarize(enrollage = min(infant_age)) %>%
    summarize(medianenroll = median(enrollage), 
              minenroll = min(enrollage), 
              maxenroll = max(enrollage))

dfyass %>% 
    group_by(subject_id) %>% 
    summarize(enrollage = min(infant_age), 
              condition = max(abxexpose)) %>% 
    filter(condition == 1) %>% 
    summarize(meanenroll = mean(enrollage), sdenroll = sd(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=min(infant_age), condition=max(abxexpose)) %>% filter(condition==0) %>% summarize(meanenroll=mean(enrollage), sdenroll = sd(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=min(infant_age), condition=max(abxexpose)) %>% filter(condition==1) %>% 
  summarize(medianenroll=median(enrollage), minenroll = min(enrollage), maxenroll = max(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=min(infant_age), condition=max(abxexpose)) %>% filter(condition==0) %>%
  summarize(medianenroll=median(enrollage), minenroll = min(enrollage), maxenroll = max(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=min(infant_age), condition=max(abxexpose)) %>% t.test(enrollage ~ condition, .)
```

### Infant age at end of study
```{r}
dfyass %>% group_by(subject_id) %>% summarize(enrollage=max(infant_age)) %>%
  summarize(meanenroll=mean(enrollage), sdenroll = sd(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=max(infant_age)) %>%
  summarize(medianenroll=median(enrollage), minenroll = min(enrollage), maxenroll = max(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=max(infant_age), condition=max(abxexpose)) %>% filter(condition==1) %>% summarize(meanenroll=mean(enrollage), sdenroll = sd(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=max(infant_age), condition=max(abxexpose)) %>% filter(condition==0) %>% summarize(meanenroll=mean(enrollage), sdenroll = sd(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=max(infant_age), condition=max(abxexpose)) %>% filter(condition==1) %>% 
  summarize(medianenroll=median(enrollage), minenroll = min(enrollage), maxenroll = max(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=max(infant_age), condition=max(abxexpose)) %>% filter(condition==0) %>%
  summarize(medianenroll=median(enrollage), minenroll = min(enrollage), maxenroll = max(enrollage))

dfyass %>% group_by(subject_id) %>% summarize(enrollage=max(infant_age), condition=max(abxexpose)) %>% t.test(enrollage ~ condition, .)
```

### Number of assessments
```{r}
dfyass %>% 
    group_by(subject_id) %>% 
    summarize(assess = n(), condition = max(abxexpose)) %>% 
    t.test(assess ~ condition, .)
```

### Gender
```{r}
dfyass %>% 
    group_by(subject_id) %>% 
    summarize(gender = first(gender), condition = max(abxexpose)) %>% 
    ungroup() %>%  
    summarise(chi = chisq.test(gender, condition)$statistic, 
              df = chisq.test(gender, condition)$parameter, 
              pval = chisq.test(gender, condition)$p.val)
```

### Delivery mode
```{r}
dfyass %>% 
    group_by(subject_id) %>% 
    summarize(deliver = first(Delivery.type), condition = max(abxexpose)) %>% 
    ungroup() %>%  
    summarise(chi = chisq.test(deliver, condition)$statistic, 
              df = chisq.test(deliver, condition)$parameter, 
              p = chisq.test(deliver, condition)$p.val)
```

### Shannon
```{r}
dfyass %>% 
    group_by(subject_id) %>% 
    summarize(shan = first(Shannon), condition = max(abxexpose)) %>% 
    t.test(shan ~ condition, .)
```

```{r}
dfyass %>% group_by(subject_id) %>% summarize(abx=sum(abxsum), condition=max(abxexpose)) %>% t.test(abx ~ condition, .)

dfyass %>% group_by(subject_id) %>% summarize(enrollage=sum(abxsum), condition=max(abxexpose)) %>% filter(condition==1) %>% summarize(meanenroll=mean(enrollage), sdenroll = sd(enrollage), median=median(enrollage), max=max(enrollage), min=min(enrollage))
```

## Table 2
```{r}
dfyass$penicillins %>% table()
dfyass$macrolides %>% table()
dfyass$cephalosporins %>% table()
dfyass$sulfonamides %>% table()
dfyass$other %>% table()
```
